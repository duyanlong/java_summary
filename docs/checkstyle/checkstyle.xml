<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--具体配置详解请参考：http://checkstyle.sourceforge.net/checks.html -->
<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <property name="fileExtensions" value="java"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="severity" value="error"/>
        <property name="eachLine" value="true"/>
        <message key="containsTab" value="包含tab符号，请修改!"/>
    </module>

    <!-- 检查每个java package中是否有java注释文件，默认是允许一个package-info.java，
	也可以通过allowLegacy属性配置允许package.html。此规则必须在<TreeWalker>标签外 -->
    <module name="JavadocPackage"/>

    <module name="TreeWalker">
        <!-- Checks that the outer type name and the file name match -->
        <module name="OuterTypeFilename"/>
        <!-- Checks for illegal token text -->
        <!-- 避免使用八进制或者Unicode转义 -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>

        <!-- 限制使用Unicode转义 -->
        <module name="AvoidEscapedUnicodeCharacters">
            <!--允许对不可打印（控制）字符使用转义-->
            <property name="allowEscapesForControlCharacters" value="true"/>
            <!-- 如果有尾注释，可以使用转义 -->
            <property name="allowByTailComment" value="true"/>
            <!-- 允许非打印转义 -->
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- 最大行长度检查: 对于以package|import|操链接|ftp等开头的形式忽略 -->
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern"
                value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>

        <!--检测导入声明是否使用*号-->
        <module name="AvoidStarImport"/>

        <!-- 检测顶级类、接口、枚举是否和文件名相同 -->
        <module name="OneTopLevelClass"/>

        <!-- 检测声明的语名是否换行 -->
        <module name="NoLineWrap"/>

        <!-- 检查空代码块，但对于连续的代码不进行验证，例如switch. -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!-- 代码块需要大括号 -->
        <module name="NeedBraces"/>

        <!-- 检查左大括号在类型、方法和其他块上的位置 -->
        <module name="LeftCurly"/>
        <!-- 检测右大括号的位置 -->
        <module name="RightCurly"/>

        <!-- 检测右大括号的位置 -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR,
                      LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- 检测标识符是否有空格 -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace.
                     Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- 检测每行是否只有单个声明 -->
        <module name="OneStatementPerLine"/>

        <!-- 检测变量的声明是否在其声明的语名中并且在同一行.-->
        <module name="MultipleVariableDeclarations"/>

        <!-- 检测数组类型定义的风格, 默认使用java风格的定义 -->
        <module name="ArrayTypeStyle"/>

        <!-- 检测switch是否有default语句 -->
        <module name="MissingSwitchDefault"/>

        <!-- 检测switch所有的失败的情况下，是否缺少break、return、throw或者继续处理的声明 -->
        <module name="FallThrough"/>

        <!-- 检测常数是否是大写 -->
        <module name="UpperEll"/>
        <!-- 检测修饰符是否符合Java语言编写规则中，8.1.1，8.3.1，8.4.3，9.4的部分 -->
        <module name="ModifierOrder"/>
        <!-- 检测空行的分隔符, 包括header, package, all import declarations,
        fields, constructors, methods, nested classes, static initializers and instance initializers -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!--检测换行末尾标识符-->
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <!-- 合法:
            someVariable = aBigVariableNameToMakeThings + "this may work"
                   + lookVeryInteresting;
            -->
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <!-- 合法：
              someVariable = aBigVariableNameToMakeThings + "this may work" +
                   lookVeryInteresting;
             -->
            <property name="option" value="EOL"/>
        </module>
        <!-- 检测包名称 -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 检测类型名称, 包括类名称、接口名称 -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- 检测成员变量名称是否符合规范 -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- 检测参数名称命名规范 -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 捕获异常参数名称命名规范 -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 检测局部变量、非常量的命名规范 -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- 检测类型参数名称命名规范 -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- 检测方法类型参数命名规范 -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 检测接口类型参数命名规范 -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 禁用finalize()方法-->
        <module name="NoFinalizer"/>

        <!-- 检测泛型标识是符否符合规范 -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- 检测代码缩进是否符合规范 -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>

        <!--检测缩写词规范（连续大写）-->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>

        <!-- 检测重载方法是否放在一起 -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!--检测变量声明距离, 允许最大声明距离为3-->
        <module name="VariableDeclarationUsageDistance"/>
        <!-- 检测方法定义、构造方法定义、方法调用、或者构造方法调用的标识符之间的填补和参数列表的左右的填补 -->
        <module name="MethodParamPad"/>

        <!-- 检测操作符的行包装 -->
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND,
                      LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>

        <!-- 检测注释的位置 -->
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <!-- 检测注释的位置 -->
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!--检测@语名是否有相应的描述-->
        <module name="NonEmptyAtclauseDescription"/>

        <!-- 检测doc文档中，连续行的缩进情况 -->
        <module name="JavadocTagContinuationIndentation"/>

        <!-- 检测doc文档中是否包含有不建议使用的短语 -->
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <!--检测doc文档是否符合规范
        1、 There is one blank line between each of two paragraphs and
            one blank line before the at-clauses block if it is present
        2、 Each paragraph but the first has <p> immediately before the first word, with no space after
        -->
        <module name="JavadocParagraph"/>

        <!-- 检测 @子句的顺序，param > return > throws > deprecated -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <!-- 检查方法以及构造方法的doc文档-->
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <!-- 方法名检测 -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 检测单行doc注释块是否适用于单行并且不包含@子句 -->
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>

        <!--检查空的catch块，几乎没有选项可以跳过违规。-->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="ignore|expected"/>
            <property name="commentFormat" value="ignore"/>
        </module>
        <!-- 控制注释和代码块之间的缩进 -->
        <module name="CommentsIndentation"/>

        <!-- 限定方法长度(行数) -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="max" value="60"/>
            <property name="countEmpty" value="false"/>
        </module>
        <!-- 检测行内条件 -->
        <!--
            String a = getParameter("a");
            String b = (a==null || a.length<1) ? null : a.substring(1);
        -->
        <!--
        <module name="AvoidInlineConditionals"/>
        -->

        <!-- 检测常量名 -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>
        <!-- 最大if嵌套深度 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- 最大try嵌套深度 -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
        <!-- 检测无用包引用 -->
        <module name="UnusedImports"/>
    </module>
</module>